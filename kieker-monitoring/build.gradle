buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "io.freefair.gradle:aspectj-plugin:5.0.0-rc6"
  }
}

plugins {
	id 'java'
	id 'java-library'
	id "com.github.hauner.jarTest"
}

// TODO Why must this be applied, while others get included via plugins?
apply plugin: "io.freefair.aspectj.post-compile-weaving"

repositories {
    mavenCentral()
}

configurations {
    ajc
    aspects
    aspectCompile
    compile{
        extendsFrom aspects
    }
}

repositories {
	jcenter()
	maven { url "https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito2" }
}


dependencies {
	implementation project(':kieker-common')

	implementation 'com.rabbitmq:amqp-client:4.2.1'

	implementation 'org.jctools:jctools-core:2.1.0'
	
	ajc "org.aspectj:aspectjtools:$aspectjVersion"
	implementation "org.aspectj:aspectjrt:$aspectjVersion"
	implementation "org.aspectj:aspectjweaver:$aspectjVersion"	// for our custom AspectJ weaver (class: AspectJLoader)

	implementation resolveLibrary('disl-2.0/disl-server.jar')
	implementation resolveLibrary('sigar/sigar-*.jar')
	
	implementation 'org.tukaani:xz:1.6'	// compression algorithms used by the file writers

	implementation 'org.apache.cxf:cxf-bundle-minimal:2.6.15'
	
	// https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-server
	implementation group: 'org.glassfish.jersey.core', name: 'jersey-server', version: '3.0.0-M6'
	// https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-common
	implementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '3.0.0-M6'
	// https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client
	implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '3.0.0-M6'
	
	// https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
	implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
	// https://mvnrepository.com/artifact/javax.jms/javax.jms-api
	implementation group: 'javax.jms', name: 'javax.jms-api', version: '2.0.1'
	
	implementation resolveLibrary('framework-libs/spring/aopalliance-*.jar')
	implementation resolveLibrary('framework-libs/spring/spring-beans-*.jar')
	implementation resolveLibrary('framework-libs/spring/spring-context-*.jar')
	implementation resolveLibrary('framework-libs/spring/spring-core-*.jar')
	implementation resolveLibrary('framework-libs/spring/spring-web-*.jar')
	implementation resolveLibrary('framework-libs/spring/spring-webmvc-*.jar')
	
	// testing
	testImplementation 'org.hamcrest:hamcrest-all:1.3'

	testImplementation 'org.javassist:javassist:3.24.1-GA'

	testImplementation 'junit:junit:4.12'

	testImplementation 'org.objenesis:objenesis:2.2'
	
	testImplementation 'org.easymock:easymock:3.4'
	testImplementation 'org.mockito:mockito-core:2.8.9' 
	testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
	testImplementation 'org.powermock:powermock-api-easymock:2.0.7' 
	testImplementation 'org.powermock:powermock-module-junit4:2.0.7' 
	testImplementation 'org.powermock:powermock-core:2.0.7'
	testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.7' 
	
	implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.2'
	implementation group: 'javax.jws', name: 'javax.jws-api', version: '1.1'
	
	// this project depends on the tests of kieker-common, e.g., it requires the class AbstractKiekerTest
	testImplementation project (path: ':kieker-common', configuration: 'testArchives')
	testImplementation resolveLibrary('framework-libs/spring/spring-beans-*.jar')
	testImplementation resolveLibrary('framework-libs/spring/spring-expression-*.jar')

	testImplementation 'org.eclipse.jetty:jetty-server:9.4.28.v20200408'
	testImplementation 'org.eclipse.jetty:jetty-webapp:9.4.28.v20200408'
	testImplementation 'org.eclipse.jetty:apache-jsp:9.4.28.v20200408'
	
	testImplementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
	
	testImplementation project(':kieker-common').sourceSets.test.output
	
	implementation group: 'com.github.oshi', name: 'oshi-core', version: '3.12.2'
}

task iajc(dependsOn: classes) {
    doLast {
        ant.taskdef(
        	resource: 'org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties',
            classpath: configurations.ajc.asPath
        )
        ant.iajc(
        	XlintFile: 'aspectjXlint.properties', 
        	X: 'joinpoints:synchronization', 
        	source: sourceCompatibility, 
        	target: targetCompatibility, 
        	debug: 'true', 
        	destdir: sourceSets.main.output.classesDir) {

        	classpath {
        		pathElement(location: configurations.compile.asPath)
        		pathElement(location: sourceSets.main.output.classesDir)
        	}

            sourceroots {
                pathElement(location: 'src/kieker/monitoring/probe/aspectj')
            }
           
        }
    }   
}

//compileJava.doLast {
//    tasks.iajc.execute()
//}
